using Microsoft.Maui.Devices.Sensors;

namespace MyApp.Services
{
    public interface ISamsungSensorService
    {
        Task<string> DiagnosticSensorsAsync();
        Task<bool> TestAccelerometerAsync();
        Task<bool> TestMagnetometerAsync();
        Task<bool> TestGyroscopeAsync();
        Task StartSensorsAsync(); // ‚úÖ M√©thode ajout√©e
        Task StopSensorsAsync();  // ‚úÖ M√©thode ajout√©e
        event EventHandler<SensorDataEventArgs> SensorDataChanged;
    }

    public class SensorDataEventArgs : EventArgs
    {
        public double Heading { get; set; }
        public string DirectionName { get; set; } = string.Empty;
        public bool IsWorking { get; set; }
        public string ErrorMessage { get; set; } = string.Empty;
    }

    public class SamsungSensorService : ISamsungSensorService
    {
        public event EventHandler<SensorDataEventArgs>? SensorDataChanged;
        
        private bool _isListening = false;
        private double _currentHeading = 0;
        private System.Numerics.Vector3 _lastAcceleration;
        private System.Numerics.Vector3 _lastMagnetometer;

        public async Task<string> DiagnosticSensorsAsync()
        {
            var diagnostic = new List<string>();
            diagnostic.Add("üîç DIAGNOSTIC CAPTEURS SAMSUNG");
            diagnostic.Add("================================");

            // Test disponibilit√© des capteurs
            diagnostic.Add($"üì± Device: {DeviceInfo.Model} ({DeviceInfo.Manufacturer})");
            diagnostic.Add($"ü§ñ Android: {DeviceInfo.VersionString}");
            diagnostic.Add("");

            // Test Acc√©l√©rom√®tre
            try
            {
                var accelSupported = Accelerometer.Default.IsSupported;
                diagnostic.Add($"üìê Acc√©l√©rom√®tre: {(accelSupported ? "‚úÖ Support√©" : "‚ùå Non support√©")}");
                
                if (accelSupported)
                {
                    var accelWorking = await TestAccelerometerAsync();
                    diagnostic.Add($"   Test fonctionnel: {(accelWorking ? "‚úÖ OK" : "‚ùå √âchec")}");
                }
            }
            catch (Exception ex)
            {
                diagnostic.Add($"üìê Acc√©l√©rom√®tre: ‚ùå Erreur - {ex.Message}");
            }

            // Test Magn√©tom√®tre
            try
            {
                var magSupported = Magnetometer.Default.IsSupported;
                diagnostic.Add($"üß≤ Magn√©tom√®tre: {(magSupported ? "‚úÖ Support√©" : "‚ùå Non support√©")}");
                
                if (magSupported)
                {
                    var magWorking = await TestMagnetometerAsync();
                    diagnostic.Add($"   Test fonctionnel: {(magWorking ? "‚úÖ OK" : "‚ùå √âchec")}");
                }
            }
            catch (Exception ex)
            {
                diagnostic.Add($"üß≤ Magn√©tom√®tre: ‚ùå Erreur - {ex.Message}");
            }

            // Test Gyroscope
            try
            {
                var gyroSupported = Gyroscope.Default.IsSupported;
                diagnostic.Add($"üåÄ Gyroscope: {(gyroSupported ? "‚úÖ Support√©" : "‚ùå Non support√©")}");
                
                if (gyroSupported)
                {
                    var gyroWorking = await TestGyroscopeAsync();
                    diagnostic.Add($"   Test fonctionnel: {(gyroWorking ? "‚úÖ OK" : "‚ùå √âchec")}");
                }
            }
            catch (Exception ex)
            {
                diagnostic.Add($"üåÄ Gyroscope: ‚ùå Erreur - {ex.Message}");
            }

            diagnostic.Add("");
            diagnostic.Add("üí° SOLUTIONS:");
            diagnostic.Add("- V√©rifiez que les capteurs ne sont pas d√©sactiv√©s dans les param√®tres");
            diagnostic.Add("- Red√©marrez l'app si les capteurs ne r√©pondent pas");
            diagnostic.Add("- Certains Samsung n√©cessitent d'activer 'Capteurs haute pr√©cision'");

            return string.Join("\n", diagnostic);
        }

        public async Task<bool> TestAccelerometerAsync()
        {
            try
            {
                if (!Accelerometer.Default.IsSupported)
                    return false;

                bool dataReceived = false;
                var tcs = new TaskCompletionSource<bool>();

                void OnAccelerometerChanged(object? sender, AccelerometerChangedEventArgs e)
                {
                    dataReceived = true;
                    Console.WriteLine($"üìê Acc√©l√©rom√®tre: X={e.Reading.Acceleration.X:F2}, Y={e.Reading.Acceleration.Y:F2}, Z={e.Reading.Acceleration.Z:F2}");
                    tcs.TrySetResult(true);
                }

                Accelerometer.Default.ReadingChanged += OnAccelerometerChanged;
                Accelerometer.Default.Start(SensorSpeed.UI);

                // Attendre max 5 secondes
                var timeoutTask = Task.Delay(5000);
                var completedTask = await Task.WhenAny(tcs.Task, timeoutTask);

                Accelerometer.Default.Stop();
                Accelerometer.Default.ReadingChanged -= OnAccelerometerChanged;

                return completedTask == tcs.Task && dataReceived;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Test acc√©l√©rom√®tre: {ex.Message}");
                return false;
            }
        }

        public async Task<bool> TestMagnetometerAsync()
        {
            try
            {
                if (!Magnetometer.Default.IsSupported)
                    return false;

                bool dataReceived = false;
                var tcs = new TaskCompletionSource<bool>();

                void OnMagnetometerChanged(object? sender, MagnetometerChangedEventArgs e)
                {
                    dataReceived = true;
                    Console.WriteLine($"üß≤ Magn√©tom√®tre: X={e.Reading.MagneticField.X:F2}, Y={e.Reading.MagneticField.Y:F2}, Z={e.Reading.MagneticField.Z:F2}");
                    tcs.TrySetResult(true);
                }

                Magnetometer.Default.ReadingChanged += OnMagnetometerChanged;
                Magnetometer.Default.Start(SensorSpeed.UI);

                // Attendre max 5 secondes
                var timeoutTask = Task.Delay(5000);
                var completedTask = await Task.WhenAny(tcs.Task, timeoutTask);

                Magnetometer.Default.Stop();
                Magnetometer.Default.ReadingChanged -= OnMagnetometerChanged;

                return completedTask == tcs.Task && dataReceived;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Test magn√©tom√®tre: {ex.Message}");
                return false;
            }
        }

        public async Task<bool> TestGyroscopeAsync()
        {
            try
            {
                if (!Gyroscope.Default.IsSupported)
                    return false;

                bool dataReceived = false;
                var tcs = new TaskCompletionSource<bool>();

                void OnGyroscopeChanged(object? sender, GyroscopeChangedEventArgs e)
                {
                    dataReceived = true;
                    Console.WriteLine($"üåÄ Gyroscope: X={e.Reading.AngularVelocity.X:F2}, Y={e.Reading.AngularVelocity.Y:F2}, Z={e.Reading.AngularVelocity.Z:F2}");
                    tcs.TrySetResult(true);
                }

                Gyroscope.Default.ReadingChanged += OnGyroscopeChanged;
                Gyroscope.Default.Start(SensorSpeed.UI);

                // Attendre max 5 secondes
                var timeoutTask = Task.Delay(5000);
                var completedTask = await Task.WhenAny(tcs.Task, timeoutTask);

                Gyroscope.Default.Stop();
                Gyroscope.Default.ReadingChanged -= OnGyroscopeChanged;

                return completedTask == tcs.Task && dataReceived;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Test gyroscope: {ex.Message}");
                return false;
            }
        }

        // ‚úÖ M√âTHODE AJOUT√âE: StartSensorsAsync
        public async Task StartSensorsAsync()
        {
            if (_isListening) return;

            try
            {
                Console.WriteLine("üöÄ D√©marrage capteurs Samsung...");

                // D√©marrer acc√©l√©rom√®tre
                if (Accelerometer.Default.IsSupported)
                {
                    Accelerometer.Default.ReadingChanged += OnAccelerometerChanged;
                    Accelerometer.Default.Start(SensorSpeed.UI);
                    Console.WriteLine("‚úÖ Acc√©l√©rom√®tre d√©marr√©");
                }

                // D√©marrer magn√©tom√®tre
                if (Magnetometer.Default.IsSupported)
                {
                    Magnetometer.Default.ReadingChanged += OnMagnetometerChanged;
                    Magnetometer.Default.Start(SensorSpeed.UI);
                    Console.WriteLine("‚úÖ Magn√©tom√®tre d√©marr√©");
                }

                _isListening = true;
                
                // Envoyer un √©v√©nement initial pour indiquer que les capteurs sont actifs
                SensorDataChanged?.Invoke(this, new SensorDataEventArgs
                {
                    Heading = _currentHeading,
                    DirectionName = GetDirectionName(_currentHeading),
                    IsWorking = true
                });
                
                await Task.Delay(100);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Erreur d√©marrage capteurs: {ex.Message}");
                SensorDataChanged?.Invoke(this, new SensorDataEventArgs
                {
                    IsWorking = false,
                    ErrorMessage = ex.Message
                });
            }
        }

        // ‚úÖ M√âTHODE AJOUT√âE: StopSensorsAsync
        public async Task StopSensorsAsync()
        {
            if (!_isListening) return;

            try
            {
                if (Accelerometer.Default.IsSupported)
                {
                    Accelerometer.Default.Stop();
                    Accelerometer.Default.ReadingChanged -= OnAccelerometerChanged;
                }

                if (Magnetometer.Default.IsSupported)
                {
                    Magnetometer.Default.Stop();
                    Magnetometer.Default.ReadingChanged -= OnMagnetometerChanged;
                }

                _isListening = false;
                Console.WriteLine("üõë Capteurs arr√™t√©s");
                await Task.Delay(100);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Erreur arr√™t capteurs: {ex.Message}");
            }
        }

        private void OnAccelerometerChanged(object? sender, AccelerometerChangedEventArgs e)
        {
            _lastAcceleration = new System.Numerics.Vector3(
                e.Reading.Acceleration.X, 
                e.Reading.Acceleration.Y, 
                e.Reading.Acceleration.Z);
            CalculateHeading();
        }

        private void OnMagnetometerChanged(object? sender, MagnetometerChangedEventArgs e)
        {
            _lastMagnetometer = new System.Numerics.Vector3(
                e.Reading.MagneticField.X, 
                e.Reading.MagneticField.Y, 
                e.Reading.MagneticField.Z);
            CalculateHeading();
        }

        private void CalculateHeading()
        {
            if (_lastAcceleration == default || _lastMagnetometer == default)
                return;

            try
            {
                // Calcul simplifi√© de la boussole
                var heading = Math.Atan2(_lastMagnetometer.Y, _lastMagnetometer.X) * (180.0 / Math.PI);
                
                // Normaliser entre 0 et 360
                if (heading < 0) heading += 360;
                
                // Filtrer les variations trop petites
                if (Math.Abs(heading - _currentHeading) > 5)
                {
                    _currentHeading = heading;
                    
                    SensorDataChanged?.Invoke(this, new SensorDataEventArgs
                    {
                        Heading = heading,
                        DirectionName = GetDirectionName(heading),
                        IsWorking = true
                    });
                    
                    Console.WriteLine($"üß≠ Direction: {GetDirectionName(heading)} ({heading:F0}¬∞)");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Erreur calcul boussole: {ex.Message}");
            }
        }

        private string GetDirectionName(double heading)
        {
            return heading switch
            {
                >= 337.5 or < 22.5 => "Nord ‚¨ÜÔ∏è",
                >= 22.5 and < 67.5 => "Nord-Est ‚ÜóÔ∏è",
                >= 67.5 and < 112.5 => "Est ‚û°Ô∏è",
                >= 112.5 and < 157.5 => "Sud-Est ‚ÜòÔ∏è", 
                >= 157.5 and < 202.5 => "Sud ‚¨áÔ∏è",
                >= 202.5 and < 247.5 => "Sud-Ouest ‚ÜôÔ∏è",
                >= 247.5 and < 292.5 => "Ouest ‚¨ÖÔ∏è",
                >= 292.5 and < 337.5 => "Nord-Ouest ‚ÜñÔ∏è",
                _ => "Nord ‚¨ÜÔ∏è"
            };
        }
    }
}